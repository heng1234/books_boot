{"./":{"url":"./","title":"目录","keywords":"","body":"目录 项目地址 springboot介绍 springboot集成lombok springboot基础配置 springboot使用banner springboot读取配置文件 springboot访问路径配置和Profile配置说明 springboot集成mybatis(xml形式) springboot AOP记录用户操作日志 Spring Boot 使用thymeleaf Copyright © 2020 java交流群:553997290 all right reserved，powered by Gitbook时间： 2019-10-23 18:48:42 "},"springboot.html":{"url":"springboot.html","title":"springboot介绍","keywords":"","body":"springboot介绍 Spring Boot四大核心： 1.自动配置：针对很多Spring应用程序和常用的应用功能，Spring Boot能自动提供相关配置； 2.起步依赖：告诉Spring需要什么功能，它就能引入需要的依赖库； 3.Actuator：让你能深入运行中的Spring Boot应用程序，监控程序的内部信息； 4.命令行界面：这个为Spring Boot的可选特性，主要是针对Groovy的。 官网地址:https://spring.io/projects/spring-boot/ 特征 创建独立的Spring应用程序 直接嵌入Tomcat，Jetty或Undertow（无需部署WAR文件） 提供自以为是的“入门”依赖项，以简化构建配置 尽可能自动配置Spring和3rd Party库 提供生产就绪的功能，例如指标，运行状况检查和外部配置 完全没有代码生成，也不需要XML配置 优点 快速构建项目 对主流开发框架的无配置集成 项目可独立运行，无需外部依赖 Servlet 容器 提供运行时的应用监控 极大地提高了开发、部署效率 与云计算的天然集成 起步依赖 缺点 版本迭代速度很快，一些模块改动很大 由于不用自己做配置，报错时很难定位 网上现成的解决方案比较少 可以进入该网站快速创建springboot项目 https://start.spring.io/ 也可以通过idea进行创建 这里不讲解springboot项目的创建 下一章:springboot集成lombok Copyright © 2020 java交流群:553997290 all right reserved，powered by Gitbook时间： 2019-10-17 18:36:45 "},"lombok.html":{"url":"lombok.html","title":"springboot集成lombok","keywords":"","body":"springboot2.x集成lombok插件 什么是lombok?(项目地址:https://github.com/heng1234/springboot2.x/tree/master/boot_lombok) Lombok项目是一个Java库，它会自动插入编辑器和构建工具中，Lombok提供了一组有用的注释，用来消除Java类中的大量样板代码。仅五个字符(@Data)就可以替换数百行代码从而产生干净，简洁且易于维护的Java类。 Lombok也存在一定风险，在一些开发工具商店中没有Project Lombok支持选择。 IDE和JDK升级存在破裂的风险，并且围绕项目的目标和实施存在争议。 常用注解： @Setter ：注解在类或字段，注解在类时为所有字段生成setter方法，注解在字段上时只为该字段生成setter方法。 @Getter ：使用方法同上，区别在于生成的是getter方法。 @ToString ：注解在类，添加toString方法。 @EqualsAndHashCode： 注解在类，生成hashCode和equals方法。 @NoArgsConstructor： 注解在类，生成无参的构造方法。 @RequiredArgsConstructor： 注解在类，为类中需要特殊处理的字段生成构造方法，比如final和被@NonNull注解的字段。 @AllArgsConstructor： 注解在类，生成包含类中所有字段的构造方法。 @Data： 注解在类，生成setter/getter、equals、canEqual、hashCode、toString方法，如为final属性，则不会为该属性生成setter方法。 @Slf4j： 注解在类，生成log变量，严格意义来说是常量。 简单来说就是减少了代码量 如实体类getter setter toString 等方法的编写 首先在idea安装lombok插件 不会的自行搜索idea安装lombok插件 接着在springboot项目pom文件加入 lombok插件 org.projectlombok lombok 1.18.10 true 接着编写实体类加上@Date注解 package com.boot.boot_resoure.entity; import lombok.Data; /** * @author : kaifa * create at: 2019-10-16 16:57 * @description: springboot2.x集成lombok * 不需要写get set方法插件会为我们自动生成减少了代码量 需要在idea安装lombok插件 * @Date包含 * @Getter * @Setter * @ToString * @EqualsAndHashCode * 这些注解 */ @Data public class User { private String name; private String password; } 此时看idea显示 方法自动生成了 接着编写测试controller package com.boot.boot_resoure.controller; import com.boot.boot_resoure.entity.User; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; /** * @author : kaifa * create at: 2019-10-16 17:02 * @description: lombok测试 */ @RestController @RequestMapping(\"lombok\") public class LombokController { /** * 测试lombok方法 * @return */ @GetMapping(\"/testLombok.html\") public String testLombok(){ //实体类没有写setter getter方法 还有toString方法 //都是lombok自动为我们创建的 User user = new User(); user.setName(\"name\"); user.setPassword(\"123456\"); return \"lombok:---\"+user.toString(); } } 启动项目访问 这里我把端口改为7001了因为端口冲突问题 http://localhost:7001/lombok/testLombok.html 得出结果: 下一章:springboot使用banner Copyright © 2020 java交流群:553997290 all right reserved，powered by Gitbook时间： 2019-10-22 18:08:34 "},"banner/banner.html":{"url":"banner/banner.html","title":"springboot使用banner","keywords":"","body":"springboot定制banner 什么是banner (项目地址:https://github.com/heng1234/springboot2.x/tree/master/boot_banner_yml) springboot启动的时候出现的这个文案就是banner . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.2.0.RELEASE) SpringBoot 有一个接口 org.springframework.boot.Banner 是专门来做这个操作的。我们可以实现这个接口来自定义打印 Banner 信息； org.springframework.boot.ResourceBanner 文本格式，SpringBoot 会读取配置项banner.txt和banner.location，从配置项中获取真实的文件地址；如果配置中没有配置，会把配置项作为文件去加载； org.springframework.boot.ImageBanner 图片格式，SpringBoot 加载配置项banner.image.location，从配置项中获取真实的路径，SpringBoot 会根据配置项的路径加载文件。 如果没有配置banner.image.location，转而依次加载banner.gif、banner.jpg、 banner.png这三个中存在的文件； 如果上面两种都没有配置，SpringBoot 就会加载默认的 Banner； 官网介绍: 以通过将banner.txt文件添加到类路径或将spring.banner.location属性设置为此类文件的位置来更改启动时打印的横幅。如果文件的编码不是UTF-8，则可以设置spring.banner.charset。除了一个文本文件，你还可以添加一个banner.gif，banner.jpg或banner.png图像文件到类路径或设置spring.banner.image.location属性。图像将转换为ASCII艺术作品并打印在任何文字横幅上方。 在banner.txt文件内部，可以使用以下任意占位符： 变量 描述 ${application.version} 您的应用程序的版本号，如中所述MANIFEST.MF。例如，Implementation-Version: 1.0打印为1.0。 ${application.formatted-version} 您的应用程序的版本号，已声明MANIFEST.MF并进行了格式显示（用括号括起来，并带有前缀v）。例如(v1.0)。 ${spring-boot.version} 您正在使用的Spring Boot版本。例如2.2.1.BUILD-SNAPSHOT。 ${spring-boot.formatted-version} 您正在使用的Spring Boot版本，其格式用于显示（用括号括起来，并带有前缀v）。例如(v2.2.1.BUILD-SNAPSHOT)。 ${Ansi.NAME}（或${AnsiColor.NAME}，${AnsiBackground.NAME}，${AnsiStyle.NAME}） NAMEANSI转义代码的名称在哪里。有关AnsiPropertySource详细信息，请参见。 ${application.title} 您的应用程序的标题，如中所述MANIFEST.MF。例如Implementation-Title: MyApp打印为MyApp。 SpringApplication.setBanner(…)如果要以编程方式生成横幅，则可以使用 该方法。使用该org.springframework.boot.Banner接口并实现您自己的printBanner()方法。 您还可以使用该spring.main.banner-mode属性来确定横幅是否必须在System.out（console）上打印，发送到配置的记录器（log）或根本不制作（off）。 打印的横幅注册为下以下名称的单例的bean： springBootBanner。 开始使用 首先在resource下创建一个banner.txt文件 里面内容填写: ${AnsiColor.BRIGHT_YELLOW} ${application.version} ${application.formatted-version} ${spring-boot.version} ${spring-boot.formatted-version} //////////////////////////////////////////////////////////////////// // _ooOoo_ // // o8888888o // // 88\" . \"88 // // (| ^_^ |) // // O\\ = /O // // ____/`---'\\____ // // .' \\\\| |// `. // // / \\\\||| : |||// \\ // // / _||||| -:- |||||- \\ // // | | \\\\\\ - /// | | // // | \\_| ''\\---/'' | | // // \\ .-\\__ `-` ___/-. / // // ___`. .' /--.--\\ `. . ___ // // .\"\" '_/___.' >'\"\". // // | | : `- \\`.;`\\ _ /`;.`/ - ` : | | // // \\ \\ `-. \\_ __\\ /__ _/ .-` / / // // ========`-.____`-.___\\_____/___.-`____.-'======== // // `=---=' // // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ // // 佛祖保佑 永不宕机 永无BUG 　　// //////////////////////////////////////////////////////////////////// 然后启动springboot就会出现 banner在线生成地址 SpringBoot 图片 Banner 定制 图片的 banner 支持 gif 、png、jpeg 格式的图片。使用的时候，选用合适的图片，然后将图片名字改成 banner，然后和文字的 banner.txt 文件一样，放到 resource ，目录下即可。 例如，我们将一个如下的 jpeg 格式的微博 logo 改名为 banner.jpg 文件放到 resource 目录下 启动显示 可自定义SpringApplication 如果SpringApplication默认设置不符合您的喜好，则可以创建一个本地实例并对其进行自定义。例如，要关闭横幅，您可以编写： public static void main(String[] args) { SpringApplication app = new SpringApplication(MySpringConfiguration.class); app.setBannerMode(Banner.Mode.OFF); app.run(args); } 下一章:springboot读取配置文件 Copyright © 2020 java交流群:553997290 all right reserved，powered by Gitbook时间： 2019-10-22 18:36:49 "},"banner/pro.html":{"url":"banner/pro.html","title":"springboot读取配置文件","keywords":"","body":"springboot读取配置文件 前言 (项目地址:https://github.com/heng1234/springboot2.x/tree/master/boot_banner_yml) Spring-Boot的核心配置文件是application.properties ，会默认读取该配置文件，当然也可以通过注解自定义配置文件的信息。 为什要这样读取 开发中，经常会有一些常量，变动较少，但是我们不能在java代码中写死，这样每次修改都得去java代码中修改，引用地方较多时我们需要修改很多java文件；所以我们可以集中写在某个配置文件中，这样只用修改配置文件就好 读取方法一 使用@value注解读取 首先application.yml文件里写入需要读取的数据 lv: name: hlvy password: 123456 User类 import lombok.Data; import org.springframework.beans.factory.annotation.Value; import org.springframework.stereotype.Component; import java.io.Serializable; /** * @author : kaifa * create at: 2019-10-18 14:36 * @description: springboot读取配置文件信息 */ //lombok @Data @Component public class User implements Serializable { @Value(\"${lv.name}\") private String name; @Value(\"${lv.password}\") private String password; } 测试controller类 package com.boot.boot_banner_yml.controller; import com.boot.boot_banner_yml.profile.Account; import com.boot.boot_banner_yml.profile.Text; import com.boot.boot_banner_yml.profile.User; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; /** * @author : kaifa * create at: 2019-10-18 14:47 * @description: 测试读取配置文件 */ @RestController @RequestMapping(\"test\") public class TestController { @Autowired private User user; /** * @Value 读取application.yml数据 * @return */ @RequestMapping(\"user\") public User readFileUser(){ return user; } } 访问http://localhost:7002/test/user.do 显示 方法二使用前缀读取 创建Account类 package com.boot.boot_banner_yml.profile; import lombok.Data; import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.stereotype.Component; import java.io.Serializable; /** * @author : kaifa * create at: 2019-10-18 14:36 * @description: springboot读取配置文件信息 */ //配置文件前缀 @ConfigurationProperties(prefix=\"lv\") @Component //lombok @Data public class Account implements Serializable { /** * 这里不需要写@value注解了 这里的名字与配置文件一致 */ private String name; private String password; } controller测试 @Autowired private Account account; /** * 读取application.yml数据 * 读取前缀 * @return */ @RequestMapping(\"account\") public Account readFileAccount(){ return account; } 访问http://localhost:7002/test/account.do 显示 方法三使用自定义properties文件读取 首先在resources创建 val.properties val.text= 测试自定义文件数据读取 然后创建Text类 import lombok.Data; import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.context.annotation.PropertySource; import org.springframework.stereotype.Component; import java.io.Serializable; /** * @author : kaifa * create at: 2019-10-18 14:36 * @description: springboot读取配置文件信息 */ //配置文件前缀 @ConfigurationProperties(prefix=\"val\") // 获取外部的配置文件文件,需要指定配置文件的路径 @PropertySource( value = \"classpath:val.properties\", encoding = \"utf-8\" ) @Component //lombok @Data public class Text implements Serializable { /** * 这里不需要写@value注解了 这里的名字与配置文件一致 */ private String text; } controller测试 @Autowired private Text text; /** * 自定义val.yml读取文件 * @return */ @RequestMapping(\"text\") public Text readFileText(){ return text; } 访问http://localhost:7002/test/text.do 显示 下一章:springboot访问路径配置和Profile配置说明 Copyright © 2020 java交流群:553997290 all right reserved，powered by Gitbook时间： 2019-10-22 18:37:25 "},"banner/webmvc.html":{"url":"banner/webmvc.html","title":"springboot访问路径配置和Profile配置说明","keywords":"","body":"springboot访问路径配置和Profile配置说明 Spring Boot匹配指定后缀.action .do的路径访问 (项目地址:https://github.com/heng1234/springboot2.x/tree/master/boot_banner_yml) 新建个配置文件MyWebMvcConfigurer import org.springframework.boot.web.servlet.ServletRegistrationBean; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.web.servlet.DispatcherServlet; import org.springframework.web.servlet.config.annotation.PathMatchConfigurer; import org.springframework.web.servlet.config.annotation.WebMvcConfigurer; /** * @author : kaifa * create at: 2019-10-18 17:07 * @description: WebMvcConfigurer配置类 */ @Configuration public class MyWebMvcConfigurer implements WebMvcConfigurer { @Override public void configurePathMatch(PathMatchConfigurer configurer) { //开启路径后缀匹配 configurer.setUseRegisteredSuffixPatternMatch(true); } /** * 设置匹配*.action后缀请求 * @param dispatcherServlet * @return */ @Bean public ServletRegistrationBean servletRegistrationBean(DispatcherServlet dispatcherServlet) { ServletRegistrationBean servletServletRegistrationBean = new ServletRegistrationBean<>(dispatcherServlet); servletServletRegistrationBean.addUrlMappings(\"*.action\",\"*.do\"); return servletServletRegistrationBean; } } 只有后缀是.action 和.do的才能访问controller到 Profile配置 Profile用来针对不同的环境下使用不同的配置文件，多环境配置文件必须以application-{profile}.properties的格式命，其中{profile}为环境标识。比如定义两个配置文件： application-dev.properties：开发环境 server.port=8080 application-prod.properties：生产环境 server.port=8081 至于哪个具体的配置文件会被加载，需要在application.properties文件中通过spring.profiles.active属性来设置，其值对应{profile}值。 如：spring.profiles.active=dev就会加载application-dev.properties配置文件内容。可以在运行jar文件的时候使用命令java -jar xxx.jar --spring.profiles.active={profile}切换不同的环境配置。 下一章:pringboot2.x集成mybatis(druid+xml方式) Copyright © 2020 java交流群:553997290 all right reserved，powered by Gitbook时间： 2019-10-22 18:38:51 "},"mybatis/mybatis.html":{"url":"mybatis/mybatis.html","title":"springboot集成mybatis(xml形式)","keywords":"","body":"Springboot2.x集成mybatis(druid+xml方式) 项目地址:https://github.com/heng1234/springboot2.x/tree/master/boot_mybatis 整合MyBatis之前，先搭建一个基本的Spring Boot项目项目创建地址。这里使用关系型数据库Oracle 11g 创建数据表t_user CREATE TABLE \"T_USER\" ( \"ID\" NUMBER(20,0) NOT NULL ENABLE, \"USERNAME\" VARCHAR2(50), \"PASSWORD\" VARCHAR2(50), \"CREATE_TIME\" DATE ) SEGMENT CREATION IMMEDIATE PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) TABLESPACE \"SYSTEM\" INSERT INTO \"BOOT\".\"user\"(\"ID\", \"USERNAME\", \"PASSWORD\", \"CREATE_TIME\") VALUES ('1', 'loren', '123456', TO_DATE('2019-10-22 09:38:29', 'SYYYY-MM-DD HH24:MI:SS')); INSERT INTO \"BOOT\".\"user\"(\"ID\", \"USERNAME\", \"PASSWORD\", \"CREATE_TIME\") VALUES ('2', 'hlvy', '123456', TO_DATE('2019-10-22 09:38:48', 'SYYYY-MM-DD HH24:MI:SS')); Pom.xml文件引入jar com.oracle ojdbc6 11.2.0.4 com.alibaba druid-spring-boot-starter 1.1.10 org.projectlombok lombok 1.18.10 true 集成druid application.yml配置 server: port: 7003 spring: datasource: druid: # 数据库访问配置, 使用druid数据源 # 数据源 oracle type: com.alibaba.druid.pool.DruidDataSource driver-class-name: oracle.jdbc.driver.OracleDriver url: jdbc:oracle:thin:@localhost:49161:XE username: boot password: 123456 # 连接池配置 initial-size: 5 min-idle: 5 max-active: 20 # 连接等待超时时间 max-wait: 30000 # 配置检测可以关闭的空闲连接间隔时间 time-between-eviction-runs-millis: 60000 # 配置连接在池中的最小生存时间 min-evictable-idle-time-millis: 300000 validation-query: select '1' from dual test-while-idle: true test-on-borrow: false test-on-return: false # 打开PSCache，并且指定每个连接上PSCache的大小 pool-prepared-statements: true max-open-prepared-statements: 20 max-pool-prepared-statement-per-connection-size: 20 # 配置监控统计拦截的filters, 去掉后监控界面sql无法统计, 'wall'用于防火墙 filters: stat,wall # Spring监控AOP切入点，如x.y.z.service.*,配置多个英文逗号分隔 aop-patterns: com.boot.boot_mybatis.service.* # WebStatFilter配置 web-stat-filter: enabled: true # 添加过滤规则 url-pattern: /* # 忽略过滤的格式 exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*' # StatViewServlet配置 stat-view-servlet: enabled: true # 访问路径为/druid时，跳转到StatViewServlet url-pattern: /druid/* # 是否能够重置数据 reset-enable: false # 需要账号密码才能访问控制台 login-username: druid login-password: 123456 # IP白名单 # allow: 127.0.0.1 #　IP黑名单（共同存在时，deny优先于allow） # deny: 192.168.1.218 # 配置StatFilter filter: stat: log-slow-sql: true #showSql logging: level: com: boot: boot_mybatis: mapper: debug 启动项目访问http://localhost:7003/druid/login.html 出现 用户名密码是配置文件配置的 用户名 druid 密码123456 登录进来会看到这个页面 集成mybatis pom文件引入xmyabtis包 org.mybatis.spring.boot mybatis-spring-boot-starter 1.3.1 创建 entity mapper controller service 以及resource创建mapper存储mapper xml文件 项目结构 application.yml加入 mybatis: #扫描mapper xml mapper-locations: classpath:mapper/*.xml #扫描实体类 type-aliases-package: com.boot.boot_mybatis.entity 创建MybatisConfig用于扫描mapper接口 import org.mybatis.spring.annotation.MapperScan; import org.springframework.context.annotation.Configuration; /** * @author : kaifa * create at: 2019-10-22 10:03 * @description: mybatis配置类 */ @Configuration @MapperScan(\"com.boot.boot_mybatis.mapper\") public class MybatisConfig { } UserMapper.xml select id,username,password,create_time createTime from t_user UserMapper import com.boot.boot_mybatis.entity.User; import java.util.List; /** * @author : kaifa * create at: 2019-10-22 10:10 * @description: user mapper接口 */ public interface UserMapper { /**查询所有用户*/ List selectListAll(); } UserService import com.boot.boot_mybatis.entity.User; import com.boot.boot_mybatis.mapper.UserMapper; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import java.util.List; /** * @author : kaifa * create at: 2019-10-22 10:10 * @description: user 业务层 */ @Service public class UserService { @Autowired private UserMapper userMapper; /** * 查询所有用户 * @return */ public List selectListAll(){ return userMapper.selectListAll(); } } controller import com.boot.boot_mybatis.entity.User; import com.boot.boot_mybatis.service.UserService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import java.util.List; /** * @author : kaifa * create at: 2019-10-22 10:16 * @description: user controller */ @RestController @RequestMapping(\"user\") public class UserController { @Autowired private UserService userService; /** * 查询所有用户 * @return */ @RequestMapping(\"userList.do\") List selectListAll(){ return userService.selectListAll(); } } 浏览器访问http://localhost:7003/user/userList.do 查看druid监控 下一章:Spring Boot 2.x AOP记录用户操作日志 Copyright © 2020 java交流群:553997290 all right reserved，powered by Gitbook时间： 2019-10-22 18:42:31 "},"Aop/aop.html":{"url":"Aop/aop.html","title":"springboot  AOP记录用户操作日志","keywords":"","body":"Spring Boot 2.x AOP记录用户操作日志 项目地址:https://github.com/heng1234/springboot2.x/tree/master/boot_log_aop springboot使用AOP配合自定义注解可以方便的实现用户操作的监控 首先pom文件加入jar com.alibaba druid-spring-boot-starter 1.1.10 org.projectlombok lombok 1.18.10 true org.mybatis.spring.boot mybatis-spring-boot-starter 1.3.1 org.springframework.boot spring-boot-starter-web org.springframework.boot spring-boot-starter-aop 2.1.7.RELEASE com.oracle ojdbc6 11.2.0.4 创建数据库表这里使用的是oracle11g CREATE TABLE \"SYS_LOG\" ( \"ID\" NUMBER(20) NOT NULL , \"USERNAME\" VARCHAR2(50 BYTE) NULL , \"OPERATION\" VARCHAR2(50 BYTE) NULL , \"TIME\" NUMBER(11) NULL , \"METHOD\" VARCHAR2(200 BYTE) NULL , \"PARAMS\" VARCHAR2(500 BYTE) NULL , \"IP\" VARCHAR2(64 BYTE) NULL , \"CREATE_TIME\" DATE NULL ); COMMENT ON COLUMN \"SYS_LOG\".\"USERNAME\" IS '用户名'; COMMENT ON COLUMN \"SYS_LOG\".\"OPERATION\" IS '用户操作'; COMMENT ON COLUMN \"SYS_LOG\".\"TIME\" IS '响应时间'; COMMENT ON COLUMN \"SYS_LOG\".\"METHOD\" IS '请求方法'; COMMENT ON COLUMN \"SYS_LOG\".\"PARAMS\" IS '请求参数'; COMMENT ON COLUMN \"SYS_LOG\".\"IP\" IS 'IP地址'; COMMENT ON COLUMN \"SYS_LOG\".\"CREATE_TIME\" IS '创建时间'; CREATE SEQUENCE seq_sys_log START WITH 1 INCREMENT BY 1; 对应的实体类 import lombok.Data; import java.io.Serializable; import java.util.Date; @Data public class SysLog implements Serializable{ private static final long serialVersionUID = -6309732882044872298L; /** * id */ private Integer id; /** * 用户名 */ private String username; /** * 用户操作 */ private String operation; /** * 响应时间 */ private Integer time; /** * 请求方法 */ private String method; /** * 请求参数 */ private String params; /** * Ip地址 */ private String ip; /** * 创建时间 */ private Date createTime; } 定义注解@Log注解 package com.boot.boot_log_aop.annotation; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Retention(value = RetentionPolicy.RUNTIME) @Target(value = ElementType.METHOD) public @interface Log { String value() default \"\"; } mapper import com.boot.boot_log_aop.entity.SysLog; /** * @author : kaifa * create at: 2019-10-22 17:30 * @description: log mapper接口 */ public interface LogMapper { /** * 切面保存日志 * @param sysLog * @return */ public int saveLog(SysLog sysLog); } Mapper.xml INSERT INTO SYS_LOG(ID,USERNAME,OPERATION,TIME,METHOD,PARAMS,IP,CREATE_TIME) VALUES (seq_sys_log.nextval, #{username}, #{operation}, #{time}, #{method}, #{params}, #{ip}, #{createTime}) 定义一个LogAspect类，使用@Aspect标注让其成为一个切面，切点为使用@Log注解标注的方法，使用@Around环绕通知 /** * @author : kaifa * create at: 2019-10-22 17:19 * @description: log 切面 */ @Component @Aspect public class LogAspect { @Autowired private LogMapper logMapper; @Pointcut(\"@annotation(com.boot.boot_log_aop.annotation.Log)\") public void pointcut(){ } /** * 要有返回值,不然执行的方法返回为空 * @param point * @return */ @Around(\"pointcut()\") public Object around(ProceedingJoinPoint point){ Object obj = null; // Object[] args = point.getArgs(); long beginTime = System.currentTimeMillis(); try { // 执行方法 obj = point.proceed(); } catch (Throwable e) { e.printStackTrace(); } // 执行时长(毫秒) long time = System.currentTimeMillis() - beginTime; // 保存日志 saveLog(point, time); return obj; } private void saveLog(ProceedingJoinPoint joinPoint, long time) { MethodSignature signature = (MethodSignature) joinPoint.getSignature(); Method method = signature.getMethod(); SysLog sysLog = new SysLog(); Log logAnnotation = method.getAnnotation(Log.class); if (logAnnotation != null) { // 注解上的描述 sysLog.setOperation(logAnnotation.value()); } // 请求的方法名 String className = joinPoint.getTarget().getClass().getName(); String methodName = signature.getName(); sysLog.setMethod(className + \".\" + methodName + \"()\"); // 请求的方法参数值 Object[] args = joinPoint.getArgs(); // 请求的方法参数名称 LocalVariableTableParameterNameDiscoverer u = new LocalVariableTableParameterNameDiscoverer(); String[] paramNames = u.getParameterNames(method); if (args != null && paramNames != null) { String params = \"\"; for (int i = 0; i 测试 import javax.servlet.http.HttpServletRequest; /** * @author : kaifa * create at: 2019-10-22 17:33 * @description: 测试日志切面controller */ @RestController @RequestMapping(\"log\") public class LogController { @RequestMapping(\"findlog\") @Log(\"hello log\") public String log1(HttpServletRequest request){ return \"hello log\"; } @Log(\"测试log\") @RequestMapping(\"findlogId\") public String log2(HttpServletRequest request,String name){ return \"hello \"+name; } } 项目结构: 启动项目，分别访问 http://localhost:7004/log/findlog http://localhost:7004/log/findlogId?name=111 查询数据库 下一章:Spring Boot 使用thymeleaf Copyright © 2020 java交流群:553997290 all right reserved，powered by Gitbook时间： 2019-10-23 18:46:50 "},"thymeleaf/tf.html":{"url":"thymeleaf/tf.html","title":"Spring Boot 使用thymeleaf","keywords":"","body":"SpringBoot整合Thymeleaf 项目地址：https://github.com/heng1234/springboot2.x/commit/25bbc2433c6f5953575d22d3179383bf7273d82d 常用模板引擎对比 模板引擎 优点 缺点 jsp 1、功能强大，可以写java代码 2、支持jsp标签（jsp tag） 3、支持表达式语言（el） 4、官方标准，用户群广，丰富的第三方jsp标签库 5、性能良好。jsp编译成class文件执行，有很好的性能表现 动态资源和静态资源全部耦合在一起，必须要在支持java的web服务器里运行（例如tomcat，jetty，resin等）服务器压力大 FreeMarker 1、不能编写java代码，可以实现严格的mvc分离 2、性能非常不错 3、对jsp标签支持良好 4、内置大量常用功能，使用非常方便 5、宏定义（类似jsp标签）非常方便 6、使用表达式语言 1、不是官方标准 2、用户群体和第三方标签库没有jsp多 Thymeleaf 静态html嵌入标签属性，浏览器可以直接打开模板文件，便于前后端联调。springboot官方推荐方案。 模板必须符合xml规范 SpringBoot整合Themeleaf pom org.springframework.boot spring-boot-starter-thymeleaf org.springframework.boot spring-boot-starter-web org.projectlombok lombok true net.sourceforge.nekohtml nekohtml 1.9.22 application.properties server.port=7004 #开启模板缓存（默认值：true） #开发时关闭缓存,不然没法看到实时页面 spring.thymeleaf.cache=false #Check that the template exists before rendering it. spring.thymeleaf.check-template=true #检查模板位置是否正确（默认值:true） spring.thymeleaf.check-template-location=true #Content-Type的值（默认值：text/html） spring.thymeleaf.servlet.content-type=text/html #开启MVC Thymeleaf视图解析（默认值：true） spring.thymeleaf.enabled=true #模板编码 spring.thymeleaf.encoding=UTF-8 #要被排除在解析之外的视图名称列表，用逗号分隔 spring.thymeleaf.excluded-view-names= #要运用于模板之上的模板模式。另见StandardTemplate-ModeHandlers(默认值：HTML5) # 用非严格的 HTML spring.thymeleaf.mode=HTML5 #在构建URL时添加到视图名称前的前缀（默认值：classpath:/templates/） spring.thymeleaf.prefix=classpath:/templates/ #在构建URL时添加到视图名称后的后缀（默认值：.html） spring.thymeleaf.suffix=.html #Thymeleaf模板解析器在解析器链中的顺序。默认情况下，它排第一位。顺序从1开始，只有在定义了额外的TemplateResolver Bean时才需要设置这个属性。 #spring.thymeleaf.template-resolver-order= #可解析的视图名称列表，用逗号分隔 #spring.thymeleaf.view-names= #spring.mvc.view.prefix=/ #spring.mvc.view.suffix=.html Controller import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.RequestMapping; import javax.servlet.http.HttpServletRequest; /** * @author : kaifa * create at: 2019-10-23 13:55 * @description: thymeleaf 控制层 */ @Controller @RequestMapping(\"tf\") public class ThyeleafController { @RequestMapping(\"index.do\") public String toIndex(HttpServletRequest request, String name, Model model){ model.addAttribute(\"name\",name); model.addAttribute(\"href\",\"https://blog.csdn.net/qq_39313596/article/details/82147626\"); return \"index\"; } } templates新建index.html 这可以省略--> Title thymeleaf教程地址: name: 访问http://localhost:7004/tf/index.do?name=hlvy Copyright © 2020 java交流群:553997290 all right reserved，powered by Gitbook时间： 2019-10-23 18:44:14 "}}