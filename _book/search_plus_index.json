{"./":{"url":"./","title":"Introduction","keywords":"","body":"目录 springboot介绍 springboot集成lombok springboot基础配置 springboot使用banner Copyright © 2020 java交流群:553997290 all right reserved，powered by Gitbook时间： 2019-10-18 13:15:38 "},"lombok.html":{"url":"lombok.html","title":"springboot集成lombok","keywords":"","body":"springboot集成lombok插件 什么是lombok?(项目地址:https://github.com/heng1234/springboot2.x) Lombok项目是一个Java库，它会自动插入编辑器和构建工具中，Lombok提供了一组有用的注释，用来消除Java类中的大量样板代码。仅五个字符(@Data)就可以替换数百行代码从而产生干净，简洁且易于维护的Java类。 Lombok也存在一定风险，在一些开发工具商店中没有Project Lombok支持选择。 IDE和JDK升级存在破裂的风险，并且围绕项目的目标和实施存在争议。 常用注解： @Setter ：注解在类或字段，注解在类时为所有字段生成setter方法，注解在字段上时只为该字段生成setter方法。 @Getter ：使用方法同上，区别在于生成的是getter方法。 @ToString ：注解在类，添加toString方法。 @EqualsAndHashCode： 注解在类，生成hashCode和equals方法。 @NoArgsConstructor： 注解在类，生成无参的构造方法。 @RequiredArgsConstructor： 注解在类，为类中需要特殊处理的字段生成构造方法，比如final和被@NonNull注解的字段。 @AllArgsConstructor： 注解在类，生成包含类中所有字段的构造方法。 @Data： 注解在类，生成setter/getter、equals、canEqual、hashCode、toString方法，如为final属性，则不会为该属性生成setter方法。 @Slf4j： 注解在类，生成log变量，严格意义来说是常量。 简单来说就是减少了代码量 如实体类getter setter toString 等方法的编写 首先在idea安装lombok插件 不会的自行搜索idea安装lombok插件 接着在springboot项目pom文件加入 lombok插件 org.projectlombok lombok 1.18.10 true 接着编写实体类加上@Date注解 package com.boot.boot_resoure.entity; import lombok.Data; /** * @author : kaifa * create at: 2019-10-16 16:57 * @description: springboot2.x集成lombok * 不需要写get set方法插件会为我们自动生成减少了代码量 需要在idea安装lombok插件 * @Date包含 * @Getter * @Setter * @ToString * @EqualsAndHashCode * 这些注解 */ @Data public class User { private String name; private String password; } 此时看idea显示 方法自动生成了 接着编写测试controller package com.boot.boot_resoure.controller; import com.boot.boot_resoure.entity.User; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; /** * @author : kaifa * create at: 2019-10-16 17:02 * @description: lombok测试 */ @RestController @RequestMapping(\"lombok\") public class LombokController { /** * 测试lombok方法 * @return */ @GetMapping(\"/testLombok.html\") public String testLombok(){ //实体类没有写setter getter方法 还有toString方法 //都是lombok自动为我们创建的 User user = new User(); user.setName(\"name\"); user.setPassword(\"123456\"); return \"lombok:---\"+user.toString(); } } 启动项目访问 这里我把端口改为7001了因为端口冲突问题 http://localhost:7001/lombok/testLombok.html 得出结果: 项目地址:https://github.com/heng1234/springboot2.x 下一章:springboot使用banner Copyright © 2020 java交流群:553997290 all right reserved，powered by Gitbook时间： 2019-10-18 10:36:16 "},"banner/banner.html":{"url":"banner/banner.html","title":"springboot使用banner","keywords":"","body":"springboot定制banner 什么是banner springboot启动的时候出现的这个文案就是banner . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.2.0.RELEASE) SpringBoot 有一个接口 org.springframework.boot.Banner 是专门来做这个操作的。我们可以实现这个接口来自定义打印 Banner 信息； org.springframework.boot.ResourceBanner 文本格式，SpringBoot 会读取配置项banner.txt和banner.location，从配置项中获取真实的文件地址；如果配置中没有配置，会把配置项作为文件去加载； org.springframework.boot.ImageBanner 图片格式，SpringBoot 加载配置项banner.image.location，从配置项中获取真实的路径，SpringBoot 会根据配置项的路径加载文件。 如果没有配置banner.image.location，转而依次加载banner.gif、banner.jpg、 banner.png这三个中存在的文件； 如果上面两种都没有配置，SpringBoot 就会加载默认的 Banner； 官网介绍: 以通过将banner.txt文件添加到类路径或将spring.banner.location属性设置为此类文件的位置来更改启动时打印的横幅。如果文件的编码不是UTF-8，则可以设置spring.banner.charset。除了一个文本文件，你还可以添加一个banner.gif，banner.jpg或banner.png图像文件到类路径或设置spring.banner.image.location属性。图像将转换为ASCII艺术作品并打印在任何文字横幅上方。 在banner.txt文件内部，可以使用以下任意占位符： 变量 描述 ${application.version} 您的应用程序的版本号，如中所述MANIFEST.MF。例如，Implementation-Version: 1.0打印为1.0。 ${application.formatted-version} 您的应用程序的版本号，已声明MANIFEST.MF并进行了格式显示（用括号括起来，并带有前缀v）。例如(v1.0)。 ${spring-boot.version} 您正在使用的Spring Boot版本。例如2.2.1.BUILD-SNAPSHOT。 ${spring-boot.formatted-version} 您正在使用的Spring Boot版本，其格式用于显示（用括号括起来，并带有前缀v）。例如(v2.2.1.BUILD-SNAPSHOT)。 ${Ansi.NAME}（或${AnsiColor.NAME}，${AnsiBackground.NAME}，${AnsiStyle.NAME}） NAMEANSI转义代码的名称在哪里。有关AnsiPropertySource详细信息，请参见。 ${application.title} 您的应用程序的标题，如中所述MANIFEST.MF。例如Implementation-Title: MyApp打印为MyApp。 SpringApplication.setBanner(…)如果要以编程方式生成横幅，则可以使用 该方法。使用该org.springframework.boot.Banner接口并实现您自己的printBanner()方法。 您还可以使用该spring.main.banner-mode属性来确定横幅是否必须在System.out（console）上打印，发送到配置的记录器（log）或根本不制作（off）。 打印的横幅注册为下以下名称的单例的bean： springBootBanner。 开始使用 首先在resource下创建一个banner.txt文件 里面内容填写: ${AnsiColor.BRIGHT_YELLOW} ${application.version} ${application.formatted-version} ${spring-boot.version} ${spring-boot.formatted-version} //////////////////////////////////////////////////////////////////// // _ooOoo_ // // o8888888o // // 88\" . \"88 // // (| ^_^ |) // // O\\ = /O // // ____/`---'\\____ // // .' \\\\| |// `. // // / \\\\||| : |||// \\ // // / _||||| -:- |||||- \\ // // | | \\\\\\ - /// | | // // | \\_| ''\\---/'' | | // // \\ .-\\__ `-` ___/-. / // // ___`. .' /--.--\\ `. . ___ // // .\"\" '_/___.' >'\"\". // // | | : `- \\`.;`\\ _ /`;.`/ - ` : | | // // \\ \\ `-. \\_ __\\ /__ _/ .-` / / // // ========`-.____`-.___\\_____/___.-`____.-'======== // // `=---=' // // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ // // 佛祖保佑 永不宕机 永无BUG 　　// //////////////////////////////////////////////////////////////////// 然后启动springboot就会出现 banner在线生成地址 SpringBoot 图片 Banner 定制 图片的 banner 支持 gif 、png、jpeg 格式的图片。使用的时候，选用合适的图片，然后将图片名字改成 banner，然后和文字的 banner.txt 文件一样，放到 resource ，目录下即可。 例如，我们将一个如下的 jpeg 格式的微博 logo 改名为 banner.jpg 文件放到 resource 目录下 启动显示 可自定义SpringApplication 如果SpringApplication默认设置不符合您的喜好，则可以创建一个本地实例并对其进行自定义。例如，要关闭横幅，您可以编写： public static void main(String[] args) { SpringApplication app = new SpringApplication(MySpringConfiguration.class); app.setBannerMode(Banner.Mode.OFF); app.run(args); } Copyright © 2020 java交流群:553997290 all right reserved，powered by Gitbook时间： 2019-10-18 13:10:26 "}}